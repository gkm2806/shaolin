{"version":3,"sources":["../../src/routers/user.js"],"names":["UserRouter","express","Router","route","get","req","res","Usuarios","find","err","users","json","post","next","findOne","username","body","exec","findUser","status","send","message","password","bcrypt","hashSync","Usuario","save","undefined","console","log","token","id","_id","_doc","deleteMany","params","select","user","compareSync","toString","permission"],"mappings":"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","sourcesContent":["import express from 'express';\nimport Usuarios from '../models/users';\nimport {generateToken} from \"../models/users\"\nimport bcrypt from \"bcrypt\"\nimport Auth from \"../auth/auth\"\n\nconst UserRouter = express.Router();\n\n//console.log(Usuarios, UserRouter)\nUserRouter.route('/')\n    .get((req, res) => {\n        Usuarios.find({}, (err, users) => {\n            res.json(users)\n        })\n    })\n    .post((req,res,next) => Auth(req,res,next))\n    .post(async (req, res) => {\n        try {\n            let findUser = await Usuarios.findOne({ username: req.body.username }).exec()\n            if (findUser) {\n                return res.status(400).send({ message: \"Usuario JÃ¡ existente\" });\n            }\n            req.body.password = bcrypt.hashSync(req.body.password, 10)\n            let Usuario = new Usuarios(req.body);\n            \n            await Usuario.save()\n            Usuario.password = undefined\n            console.log(\"Usuario \\\"\"+req.body.username+\"\\\" criado\")\n            let token = generateToken({id: Usuario._id})\n            Usuario._doc.token = token\n            res.status(201).send(Usuario._doc);\n        } catch (error) {\n            console.log(error)\n            res.status(500).send(error);\n        }\n    })\n\nUserRouter.route('/DELETEALL')\n    .get((req, res) => {\n        Usuarios.deleteMany({}, () => {\n            res.send(\"deletado\")\n        })\n    })\n\nUserRouter.route('/:id')\n    .get(async (req, res) => {\n        let findUser = await Usuarios.findOne({ _id: req.params.id })\n        console.log(findUser._doc)\n        if(!findUser) res.status(400).send(\"No user found with this id\")\n        res.status(200).send(findUser._doc)\n    })\n\nUserRouter.route(\"/login\")\n    .post(async (req, res) => {\n        try {\n            const user = await Usuarios.findOne({ username: req.body.username }).select('+password')\n            if (!user) {\n                return res.status(400).send({ message: \"Usuario nao encontrado\" });\n            }\n            if (!bcrypt.compareSync(req.body.password.toString(), user.password)) {\n                console.log(\"invalid password\")\n                return res.status(400).send({ message: \"Senha incorreta\" });\n            }\n            user.password = \"\"\n            console.log(user.username + \" conectado\")\n            res.send({\n                username: user.username,\n                permission: user.permission,\n                id: user._id,\n                token:generateToken({id: user._id})\n            });\n        } catch (error) {\n            console.log(error)\n            res.status(500).send(error);\n        }\n    });\n\nexport default UserRouter"],"file":"user.js"}